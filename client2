import socket
import json

def main():
    try:
        client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        client_socket.connect(('localhost', 9999))

        print("Connected to server.")

        choice = input("Choose 'sign up' or 'login': ").lower()
        while choice not in ['sign up', 'login']:
            print("Invalid choice. Please choose 'signup' or 'login'.")
            choice = input("Choose 'signup' or 'login': ").lower()

        client_socket.send(choice.encode())

        if choice == 'sign up':
            username = input("Enter username: ")
            password = input("Enter password: ")
            role = input("Are you an owner or a customer? Enter 'owner' or 'customer': ")
            signup_data = f"{username}:{password}:{role}"
            client_socket.send(signup_data.encode())
        elif choice == 'login':
            username = input("Enter username: ")
            password = input("Enter password: ")
            login_data = f"{username}:{password}"
            client_socket.send(login_data.encode())
            login_response = client_socket.recv(1024).decode()
            login_parts = login_response.split("|")
            if len(login_parts) == 2 and login_parts[0] == 'Login successful':
                role_flag = login_parts[1]
                print(f"Logged in as {role_flag}")
                if role_flag == 'owner':
                    action = input("Choose 'add item' or 'modify item': ").lower()
                    while action not in ['add item', 'modify item']:
                        print("Invalid choice. Please choose 'add item' or 'modify item'.")
                        action = input("Choose 'add item' or 'modify item': ").lower()
                    client_socket.send(action.encode())
                    if action == 'add item':
                        item_name = input("Enter the item name: ")
                        item_price = input("Enter the item price: ")
                        item_data = f"{item_name}:{item_price}"
                        client_socket.send(item_data.encode())
                        menu_update_response = client_socket.recv(1024).decode()
                        print(menu_update_response)
                    elif action == 'modify item':
                        item_name = input("Enter the item name to modify: ")
                        item_price = input("Enter the new item price: ")
                        item_data = f"{item_name}:{item_price}"
                        client_socket.send(item_data.encode())
                        menu_update_response = client_socket.recv(1024).decode()
                        print(menu_update_response)
            if role_flag == 'customer':
                print("Menu:")
                menu_items = json.loads(client_socket.recv(1024).decode())
                for item in menu_items:
                    print(f"{item['name']}: ${item['price']}")
                order = {}
                total_price = 0  # Initialize total price
                while True:
                    item_name = input("Enter the item name you want to order (or 'done' to finish): ")

                    if item_name.lower() == 'done':
                        order_data = json.dumps(order)
                        client_socket.send(order_data.encode())
                        confirmation = client_socket.recv(1024).decode()
                        print(confirmation)
                        confirmation = "Total Price: $X"  # Replace X with the actual total price received from the server
                        address_choice = input("Do you want to confirm your order? Enter 'confirm' to confirm or 'cancel' to cancel: ")
                        client_socket.send(address_choice.encode())
                        if address_choice.lower() == 'confirm':
                            delivery_address = input("Enter your delivery address:")

                            client_socket.send(delivery_address.encode())
                        break
                    else:
                        item_quantity = input("Enter the quantity: ")
                        order[item_name] = int(item_quantity)

            else:
                print(login_response)

        response = client_socket.recv(1024).decode()
        print(response)

    except ConnectionRefusedError:
        print("make sure the server is running to connect")
    except socket.error as e:
        print(f"Socket error: {e}")
    except Exception as e:
        print("An error occurred")

    finally:
        client_socket.close()

if __name__ == "__main__":
    main()
